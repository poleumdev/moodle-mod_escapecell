<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Provides the class attestoodle\privacy\provider.
 *
 * @package    mod_escapecell
 * @copyright  2020 Pole de Ressource Numerique de l'Universite du Mans
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace mod_escapecell\privacy;

use core_privacy\local\metadata\collection;
use core_privacy\local\request\approved_contextlist;
use core_privacy\local\request\approved_userlist;
use core_privacy\local\request\contextlist;
use core_privacy\local\request\deletion_criteria;
use core_privacy\local\request\helper;
use core_privacy\local\request\userlist;
use core_privacy\local\request\writer;

defined('MOODLE_INTERNAL') || die();

/**
 * Privacy API implementation for escape cell.
 *
 * @copyright 2020 marc.leconte
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class provider implements
    \core_privacy\local\metadata\provider,
    \core_privacy\local\request\plugin\provider,
    \core_privacy\local\request\core_userlist_provider {

     /**
      * Describe all the places where the mod escape cell stores some personal data.
      *
      * @param collection $collection Collection of items to add metadata to.
      * @return collection Collection with our added items.
      */
    public static function get_metadata(collection $collection) : collection {
        // Tables where user data is stored.
        $collection->add_database_table('escapecell_score',
            [
                'userid' => 'privacy:metadata:escapecell_score:userid',
                'jeux' => 'privacy:metadata:escapecell_score:jeux',
                'niveau' => 'privacy:metadata:escapecell_score:niveau',
                'score' => 'privacy:metadata:escapecell_score:score',
            ],
            'privacy:metadata:escapecell_score'
        );

        return $collection;
    }

    // Methods for \core_privacy\local\request\plugin\provider.

    /**
     * Get the list of contexts that contain user information for the specified user.
     *
     * @param   int           $userid       The user to search.
     * @return  contextlist   $contextlist  The list of contexts used in this plugin.
     */
    public static function get_contexts_for_userid(int $userid) : contextlist {
        // If user was already deleted, do nothing.
        if (!\core_user::get_user($userid)) {
            return null;
        }
        $sql = "SELECT c.id
                  FROM {context} c
            INNER JOIN {course_modules} cm
                    ON cm.id = c.instanceid
                   AND c.contextlevel = :contextlevel
            INNER JOIN {modules} m
                    ON m.id = cm.module
                   AND m.name = :modname
            INNER JOIN {escapecell_score} score
                    ON score.jeux = cm.instance
                 WHERE score.userid = :userid";

        $params = [
            'modname' => 'escapecell',
            'contextlevel' => CONTEXT_MODULE,
            'userid' => $userid,
        ];
        $contextlist = new contextlist();
        $contextlist->add_from_sql($sql, $params);
        return $contextlist;
    }

    /**
     * Delete personal data for the user in a list of contexts.
     *
     * We only consider the deletion of learner data the deletion of attestations
     * generated by the operator is not taken into account because it may generate
     * problems.
     *
     * @param approved_contextlist $contextlist List of contexts to delete data from.
     */
    public static function delete_data_for_user(approved_contextlist $contextlist) {
        global $DB;

        if (empty($contextlist->count())) {
            return;
        }
        $userid = $contextlist->get_user()->id;
        $DB->delete_records('escapecell_score', ['userid' => $userid]);
    }

    /**
     * Export all user data for the specified user, in the specified contexts, using the supplied exporter instance.
     *
     * @param   approved_contextlist    $contextlist    The approved contexts to export information for.
     */
    public static function export_user_data(approved_contextlist $contextlist) {
        global $DB;

        if (empty($contextlist->count())) {
            return;
        }
        $userid = $contextlist->get_user()->id;
        $usercontext = \context_user::instance($userid);
        $sqlrq1 = "select id,jeux,niveau,score
                    from {escapecell_score}
                   where userid = :userid";
        $params = ['userid' => $userid, ];
        $result1 = $DB->get_records_sql($sqlrq1, $params);
        $tabscore = [];

        foreach ($result1 as $rowscore) {
            $jeu = $DB->get_record('escapecell', array('id' => $rowscore->jeux));
            $score = new \stdClass();
            $score->jeux = $jeu->name;
            $score->niveau = $rowscore->niveau;
            $score->score = $rowscore->score;
            $tabscore[] = $score;
        }

        $datas = new \stdClass();
        $datas->scores = $tabscore;
        $subcontext = get_string('pluginname', 'escapecell');
        writer::with_context($usercontext)->export_data([$subcontext], $datas);
    }

    /**
     * Delete all personal data for all users in the specified context.
     * //to delete all data for all users in the specified context.
     * @param context $context Context to delete data from.
     */
    public static function delete_data_for_all_users_in_context(\context $context) {
    }


    // Method for \core_privacy\local\request\core_userlist_provider.
    /**
     * Get the list of users who have data within a context.
     * //to locate the users who hold any personal data in a specific context
     * @param userlist $userlist The userlist containing the list of users who have data in this context/plugin combination.
     */
    public static function get_users_in_context(userlist $userlist) {
         $context = $userlist->get_context();

        if (!$context instanceof \context_module) {
            return;
        }

        $params = [
            'instanceid'    => $context->instanceid,
            'modulename'    => 'escapecell',
        ];

        $sql = "SELECT bn.userid
                  FROM {course_modules} cm
                  JOIN {modules} m ON m.id = cm.module AND m.name = :modulename
                  JOIN {escape_score} bn ON bn.jeux = cm.instance
                 WHERE cm.id = :instanceid";

        $userlist->add_from_sql('userid', $sql, $params);
    }

    /**
     * Delete multiple users within a single context.
     * //to delete data for multiple users in the specified context.
     * @param approved_userlist $userlist The approved context and user information to delete information for.
     */
    public static function delete_data_for_users(approved_userlist $userlist) {
        global $DB;

        $context = $userlist->get_context();
        list($userinsql, $userinparams) = $DB->get_in_or_equal($userlist->get_userids(), SQL_PARAMS_NAMED);
        $params = array_merge(['bigbluebuttonbnid' => $cm->instance], $userinparams);
        $sql = "userid {$userinsql}";

        $DB->delete_records_select('escapecell_score', $sql, $userinsql);
    }
    // Cf https://github.com/blindsidenetworks/moodle-mod_bigbluebuttonbn/blob/master/classes/privacy/provider.php .
}